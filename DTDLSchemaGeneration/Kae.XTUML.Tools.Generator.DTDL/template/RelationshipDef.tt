<#@ template language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="Kae.CIM.MetaModel.CIMofCIM" #>
<#
    var definedRels = new List<string>();
    var oattrDefs = objDef.LinkedFromR102();
    foreach (var oattrDef in oattrDefs)
    {
        var subOattrDef = oattrDef.SubClassR106();
        if (subOattrDef is CIMClassO_RATTR)
        {
            var rattrDef = (CIMClassO_RATTR)subOattrDef;
            var orefDefs = rattrDef.LinkedFromR108();
            foreach (var orefDef in orefDefs)
            {
                relName = "";
                minMultiplicity = "";
                maxMultiplicity = "";
                descrip = "";
                CIMClassR_REL rrelDef = null;
                CIMClassO_OBJ targetObjDef = GetRelSpec(orefDef, ref rrelDef, ref relName, ref minMultiplicity, ref maxMultiplicity, ref descrip);
                if (!string.IsNullOrEmpty(relName))
                {
                    string target =  DTDLGenerator.GetDTDLID(targetObjDef.Attr_Key_Lett, nameSpace, modelVersion);
                    if (!definedRels.Contains(relName))
                    {
                        relId = GetDTDLID(relName);
#>
<#= indent #>{
<#= indent #><#= indentDelta #>"@type": "Relationship",
<#= indent #><#= indentDelta #>"@id": "<#= relId #>",
<#= indent #><#= indentDelta #>"name": "<#= relName #>",
<#
                    	if (!string.IsNullOrEmpty(maxMultiplicity)) {
#>
<#= indent #><#= indentDelta #>"maxMultiplicity": <#= maxMultiplicity #>,
<#
                        }
    	                if (!string.IsNullOrEmpty(descrip)) {
	                        descrip =  DTDLGenerator.GetDescription(rrelDef, descrip);
#>
<#= indent #><#= indentDelta #>"description": "<#= descrip #>",
<#
	                    }
#>
<#= indent #><#= indentDelta #>"target": "<#= target #>"
<#= indent #>},
<#
                        definedRels.Add(relName);
                    }
                }
            }
        }
    }
#>